name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Force recreate test database
        env:
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: postgres
          PGPASSWORD: postgres
        run: |
          # Завершаем все соединения с базой
          psql -h "$PGHOST" -p "$PGPORT" \
               -U "$PGUSER" -c "
          SELECT pg_terminate_backend(pg_stat_activity.pid)
          FROM pg_stat_activity
          WHERE pg_stat_activity.datname = 'test_neondb';" || true
          
          # Удаляем и создаем базу
          psql -h "$PGHOST" -p "$PGPORT" \
               -U "$PGUSER" -c "DROP DATABASE IF EXISTS test_neondb;" || true
          psql -h "$PGPORT" -p "$PGPORT" \
               -U "$PGUSER" -c "CREATE DATABASE test_neondb;"

      - name: Apply migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_neondb
          DJANGO_SETTINGS_MODULE: EquipSenseWebApp.settings
        run: |
          python manage.py migrate --noinput

      - name: Run tests with custom test runner
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_neondb
          DJANGO_SETTINGS_MODULE: EquipSenseWebApp.settings
        run: |
          python -c "
          import os
          import django
          from django.conf import settings
          
          os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'EquipSenseWebApp.settings')
          django.setup()
          
          # Запускаем тесты напрямую, минуя стандартный test runner
          from django.test.utils import get_runner
          TestRunner = get_runner(settings)
          
          # Создаем кастомный runner который не пытается управлять БД
          class CustomTestRunner(TestRunner):
              def setup_databases(self, **kwargs):
                  # Не создаем БД, так как она уже создана и настроена
                  return {}
              
              def teardown_databases(self, old_config, **kwargs):
                  # Не удаляем БД
                  pass
          
          test_runner = CustomTestRunner(verbosity=1)
          failures = test_runner.run_tests(['EquipSense.tests'])
          exit(bool(failures))
          "